{"version":3,"sources":["utils/callHelpers.ts","hooks/useHarvest.ts","utils/erc20.ts","hooks/useTokenBalance.ts","hooks/useFarmsWithBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/TwitterCard.tsx","views/Home/Home.tsx"],"names":["approve","lpContract","masterChefContract","account","a","methods","options","address","ethers","constants","MaxUint256","send","from","stake","pid","amount","deposit","BigNumber","times","pow","toString","on","tx","transactionHash","smartStake","smartChefContract","smartStakeBnb","value","unstake","withdraw","smartChefUnstake","emergencyWithdraw","harvest","smartHarvest","sousChefContract","smartHarvestBnb","useHarvest","farmPid","dispatch","useDispatch","useWallet","useMasterchef","onReward","useCallback","txHash","fetchFarmUserDataAsync","useAllHarvest","farmPids","harvestPromises","reduce","accum","Promise","all","useHarvest3","masterChef3Contract","useMasterchef3","fetchFarm3UserDataAsync","useAllHarvest3","useSmartChefHarvest","sousId","isUsingBnb","useSmartChef","handleHarvest","harvestFn","updateUserPendingReward","updateUserBalance","getContract","provider","Web3","eth","Contract","erc20","getTokenBalance","tokenAddress","userAddress","contract","balanceOf","call","balance","useTotalSupply","slowRefresh","useRefresh","useState","totalSupply","setTotalSupply","useEffect","cakeContract","cakeABI","getCakeAddress","supply","fetchTotalSupply","useBurnedBalance","setBalance","bal","fetchBalance","useTotalSupply3","cake3ABI","getCake3Address","useBurnedBalance3","useTokenBalance","ethereum","fastRefresh","res","useFarms3WithBalance","farms3WithBalances","setFarms3WithBalances","calls","farms3Config","map","farm","getMasterChef3Address","name","params","multicall","masterChef3ABI","rawResults","results","index","fetchBalances","useFarmsWithBalance","farmsWithBalances","setFarmsWithBalances","farmsConfig","getMasterChefAddress","masterChefABI","CardValue","decimals","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","CakeHarvestBalance","earningsSum","TranslateString","useI18n","color","style","lineHeight","CakeWalletBalance","cakeBalance","StyledFarmStakingCard","styled","Card","Block","div","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","farmsWithBalance","getBalanceNumber","eggPrice","usePriceCakeBusd","toNumber","balancesWithValue","filter","balanceType","farmWithBalance","harvestAllFarms","size","mb","src","alt","width","height","toFixed","id","disabled","length","onClick","UnlockButton","fullWidth","StyledCakeStats","Row","CakeStats","burnedBalance","farms","useFarms","circSupply","minus","cakeSupply","marketCap","bdogsPerBlock","StyledTotalValueLockedCard","TotalValueLockedCard","totalValue","useTotalValue","StyledTwitterCard","TwitterCard","dataSource","sourceType","screenName","chrome","Hero","mediaQueries","lg","Cards","BaseLayout","sm","Home","Page","as","FarmStakingCard"],"mappings":"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","file":"static/js/13.7dad2450.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const smartStake = async (smartChefContract, amount, account) =>\n  smartChefContract.methods\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => tx.transactionHash)\n\nexport const smartStakeBnb = async (smartChefContract, amount, account) =>\n  smartChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\n    .on('transactionHash', (tx) => tx.transactionHash)\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const smartChefUnstake = async (smartChefContract, amount, account) => {\n  // buggy CTC\n  if (smartChefContract.options.address === '0x85f27A63cFb4Dc5a36d7Eb5EF8620D343817e156') {\n    smartChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => tx.transactionHash)\n  } else {\n    smartChefContract.methods\n      .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n      .send({ from: account })\n      .on('transactionHash', (tx) => tx.transactionHash)\n  }\n}\n\nexport const sousUnstake = async (sousChefContract, amount, account) => {\n  // shit code: hard fix for old CTK and BLK\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => tx.transactionHash)\n  }\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => tx.transactionHash)\n  }\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => tx.transactionHash)\n}\n\nexport const sousEmegencyUnstake = async (sousChefContract, amount, account) =>\n  sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => tx.transactionHash)\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  return masterChefContract.methods\n    .deposit(pid, '0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const smartHarvest = async (sousChefContract, account) =>\n  sousChefContract.methods\n    .deposit('0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => tx.transactionHash)\n\nexport const smartHarvestBnb = async (sousChefContract, account) =>\n  sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(0) })\n    .on('transactionHash', (tx) => tx.transactionHash)","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, fetchFarm3UserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { smartHarvest, smartHarvestBnb, harvest } from 'utils/callHelpers'\nimport { useMasterchef, useMasterchef3, useSmartChef } from './useContract'\n\nexport const useHarvest = (farmPid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    dispatch(fetchFarmUserDataAsync(account))\n    return txHash\n  }, [account, dispatch, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest = (farmPids: number[]) => {\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\n\nexport const useHarvest3 = (farmPid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChef3Contract = useMasterchef3()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChef3Contract, farmPid, account)\n    dispatch(fetchFarm3UserDataAsync(account))\n    return txHash\n  }, [account, dispatch, farmPid, masterChef3Contract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest3 = (farmPids: number[]) => {\n  const { account } = useWallet()\n  const masterChef3Contract = useMasterchef3()\n\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChef3Contract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChef3Contract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSmartChefHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const smartChefContract = useSmartChef(sousId)\n\n  const handleHarvest = useCallback(async () => {\n    const harvestFn = isUsingBnb ? smartHarvestBnb : smartHarvest\n    await harvestFn(smartChefContract, account)\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, smartChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport cake3ABI from 'config/abi/cake3.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress, getCake3Address } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply3 = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cake3ABI, getCake3Address())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance3 = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cake3ABI, getCake3Address())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress, getMasterChef3Address } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport masterChef3ABI from 'config/abi/masterchef3.json'\nimport { farmsConfig, farms3Config } from 'config/constants'\nimport { FarmConfig, Farm3Config } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nexport interface Farm3WithBalance extends Farm3Config {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingBdogs',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport const useFarms3WithBalance = () => {\n  const [farms3WithBalances, setFarms3WithBalances] = useState<Farm3WithBalance[]>([])\n  const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farms3Config.map((farm) => ({\n        address: getMasterChef3Address(),\n        name: 'pendingBdogs',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChef3ABI, calls)\n      const results = farms3Config.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarms3WithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farms3WithBalances\n}\n\nexport default useFarmsWithBalance\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap-libs/uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  prefix?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold fontSize={fontSize}>\n      {prefix}{countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport CardValue from './CardValue'\n\nconst CakeHarvestBalance = ({earningsSum}) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={earningsSum} />\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport CardValue from './CardValue'\n\nconst CakeWalletBalance = ({cakeBalance}) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\n}\n\nexport default CakeWalletBalance\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\nimport useAllEarnings from '../../../hooks/useAllEarnings'\nimport { usePriceCakeBusd } from '../../../state/hooks'\nimport { getCakeAddress } from '../../../utils/addressHelpers'\nimport useTokenBalance from '../../../hooks/useTokenBalance'\nimport { getBalanceNumber } from '../../../utils/formatBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('/images/egg/2a.png');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\n  const eggPrice = usePriceCakeBusd().toNumber()\n  const earningsSum = farmsWithBalance.reduce((accum, farm) => {\n    return accum + new BigNumber(farm.balance).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(542, 'Farms & Staking')}\n        </Heading>\n        <CardImage src=\"/images/egg/2.png\" alt=\"cake logo\" width={64} height={64} />\n        <Block>\n          <Label>BDOGS to Harvest</Label>\n          <CakeHarvestBalance earningsSum={earningsSum}/>\n          <Label>~${(eggPrice * earningsSum).toFixed(2)}</Label>\n        </Block>\n        <Block>\n          <Label>BDOGS in Wallet</Label>\n          <CakeWalletBalance cakeBalance={cakeBalance} />\n          <Label>~${(eggPrice * cakeBalance).toFixed(2)}</Label>\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              width=\"100%\"\n            >\n              {pendingTx\n                ? TranslateString(548, 'Collecting BDOGS')\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\n            </Button>\n          ) : (\n            <UnlockButton fullWidth />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms, usePriceCakeBusd } from '../../../state/hooks'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const farms = useFarms();\n  const eggPrice = usePriceCakeBusd();\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0);\n  const cakeSupply = getBalanceNumber(circSupply);\n  const marketCap = eggPrice.times(circSupply);\n\n  let bdogsPerBlock = 0;\n  if(farms && farms[0] && farms[0].bdogsPerBlock){\n    bdogsPerBlock = new BigNumber(farms[0].bdogsPerBlock).div(new BigNumber(10).pow(18)).toNumber();\n  }\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          BDOGS Stats\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">Total BDOGS Supply</Text>\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(999, 'Market Cap')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">Total BDOGS Burned</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">New BDOGS/block</Text>\n          <Text bold fontSize=\"14px\">{bdogsPerBlock}</Text>\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useGetStats } from 'hooks/api'\nimport { useTotalValue } from '../../../state/hooks'\nimport CardValue from './CardValue'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items: center;\n  display: flex;\n  flex: 1;\n`\n\nconst TotalValueLockedCard = () => {\n  const TranslateString = useI18n()\n  // const data = useGetStats()\n  const totalValue = useTotalValue();\n  // const tvl = totalValue.toFixed(2);\n\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading size=\"lg\" mb=\"24px\">\n          {TranslateString(999, 'Total Value Locked (TVL)')}\n        </Heading>\n        <>\n          {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\n          {/* <Heading size=\"xl\"> */}\n            <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2}/>\n          {/* </Heading> */}\n          <Text color=\"textSubtle\">{TranslateString(999, 'Across all Farms and Pools')}</Text>\n        </>\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { Timeline } from 'react-twitter-widgets'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms } from '../../../state/hooks'\n\nconst StyledTwitterCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst TwitterCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledTwitterCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(10003, 'Announcements')}\n        </Heading>\n        <Timeline\n          dataSource={{\n            sourceType: 'profile',\n            screenName: 'dragonballdefi'\n          }}\n          options={{\n            height: '300',\n            chrome: \"noheader, nofooter\",\n            width: \"400\"\n          }}\n        />\n      </CardBody>\n    </StyledTwitterCard>\n  )\n}\n\nexport default TwitterCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from './components/FarmStakingCard'\nimport CakeStats from './components/CakeStats'\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\nimport TwitterCard from './components/TwitterCard'\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: url('/images/egg/3.png');\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('/images/egg/3.png'), url('/images/egg/3b.png');\n    background-position: left center, right center;\n    height: 165px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 48px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      <Hero>\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\n          BitDogeStar Finance\n        </Heading>\n        <Text>The smart defi farm on Binance Smart Chain</Text>\n      </Hero>\n      <div>\n        <Cards>\n          <FarmStakingCard />\n          <TwitterCard/>\n          <CakeStats />\n          <TotalValueLockedCard />\n        </Cards>\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n"],"sourceRoot":""}